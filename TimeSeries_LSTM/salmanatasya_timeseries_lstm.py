# -*- coding: utf-8 -*-
"""SalmaNatasya_TimeSeries_LSTM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18uZoKtQnOJMO-4RZvCEvCLjcKBAf-wKW

*   **Nama: SALMA NATASYA AZZAHRA**
*   **No.Regist: 1494037162100-243**
"""

from google.colab import drive
drive.mount('/content/drive')

# Import library
import numpy as np
import pandas as pd
from keras.layers import Dense, LSTM
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
import tensorflow as tf

# Read datasets
df = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/Dicoding/all_stocks_1yr.csv')
df = df.drop(columns=['Open','High','Low','Volume','Name'])
df

# Normalization
df["Close"] = (df["Close"] - df["Close"].mean()) / df["Close"].std()
df

#Checking for null values
df.isnull().sum()

# Threshold
threshold_mae = (df['Close'].max() - df['Close'].min()) * 10/100
threshold_mae

# Divide the data into training data and testing data
date = df['Date'].values
close = df['Close'].values
date_train, date_test, close_train, close_test = train_test_split(date, close, test_size=0.2, shuffle=False)

# Plot Close Average
plt.figure(figsize=(15,5))
plt.plot(date_train, close_train)
plt.title('Close average',
          fontsize=20);

def windowed_dataset(series, window_size, batch_size, shuffle_buffer):
    series = tf.expand_dims(series, axis=-1)
    ds = tf.data.Dataset.from_tensor_slices(series)
    ds = ds.window(window_size + 1, shift=1, drop_remainder=True)
    ds = ds.flat_map(lambda w: w.batch(window_size + 1))
    ds = ds.shuffle(shuffle_buffer)
    ds = ds.map(lambda w: (w[:-1], w[-1:]))
    return ds.batch(batch_size).prefetch(1)

train_set = windowed_dataset(close_train, window_size=80, batch_size=100, shuffle_buffer=1000)
model = tf.keras.models.Sequential([
  tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(128, return_sequences=True)),
  tf.keras.layers.LSTM(64),
  tf.keras.layers.Dropout(0.5),
  tf.keras.layers.Dense(128, activation="relu"),
  tf.keras.layers.Dropout(0.5),
  tf.keras.layers.Dense(64, activation="relu"),
  tf.keras.layers.Dense(1),
])

#Optimizer
optimizer = tf.keras.optimizers.SGD(lr=0.1, momentum=0.9)
model.compile(loss=tf.keras.losses.Huber(),
              optimizer=optimizer,
              metrics=["mae"])
history = model.fit(train_set,epochs=30)

